'use client';

import React, { useState, useRef, useEffect } from 'react';
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

export interface Message {
  id?: string;
  sender: 'user' | 'ai';
  message: string;
  timestamp?: Date;
  isError?: boolean;
}

interface ChatInterfaceProps {
  messages: Message[];
  onSendMessage: (message: string) => void;
  className?: string;
}

export const ChatInterface: React.FC<ChatInterfaceProps> = ({ 
  messages, 
  onSendMessage, 
  className = '' 
}) => {
  const [inputValue, setInputValue] = useState('');

  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInputValue(event.target.value);
  };

  const handleSendMessage = () => {
    if (inputValue.trim() === '') return;
    onSendMessage(inputValue);
    setInputValue('');
  };

  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className={`flex flex-col h-full rounded-lg shadow-md bg-slate-800 ${className}`}>
      {/* Message Display Area */}
      <div className="flex-1 p-4 space-y-4 overflow-y-auto">
        {messages.map((msg, index) => {
          const messageId = msg.id || `msg-${index}`;
          const timestamp = msg.timestamp || new Date();

          return (
            <div
              key={messageId}
              className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                  msg.sender === 'user'
                    ? 'bg-blue-600 text-white rounded-br-none'
                    : 'bg-slate-700 text-white rounded-bl-none'
                } ${msg.isError ? 'bg-red-600' : ''}`}
              >
                <p className="whitespace-pre-wrap break-words">{msg.message}</p>
                <p
                  className={`text-xs mt-1 ${
                    msg.sender === 'user'
                      ? 'text-blue-200 text-right'
                      : 'text-slate-400 text-left'
                  }`}
                >
                  {timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </p>
              </div>
            </div>
          );
        })}
        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <div className="p-3 border-t border-slate-700 bg-slate-800 rounded-b-lg">
        <div className="flex items-center space-x-2">
          <Input
            type="text"
            placeholder="Type your message..."
            value={inputValue}
            onChange={handleInputChange}
            onKeyPress={handleKeyPress}
            className="flex-grow bg-slate-700 text-white border-slate-600 focus:ring-blue-500 focus:border-blue-500"
          />
          <Button
            onClick={handleSendMessage}
            className="bg-blue-600 hover:bg-blue-700 text-white"
            disabled={!inputValue.trim()}
          >
            Send
          </Button>
        </div>
      </div>
    </div>
  );
};

// Example Usage (can be removed or kept for testing)
interface ChatInterfaceExampleProps {
  initialMessages?: Message[];
}

export const ChatInterfaceExample: React.FC<ChatInterfaceExampleProps> = ({
  initialMessages = [],
}) => {
  const [messages, setMessages] = useState<Message[]>([
    ...initialMessages,
    {
      sender: 'ai',
      message: 'Hello! How can I help you with your studies today?',
      timestamp: new Date(),
    },
  ]);

  const handleSendMessage = (text: string) => {
    const userMessage: Message = {
      sender: 'user',
      message: text,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);

    // Simulate AI response
    setTimeout(() => {
      const aiMessage: Message = {
        sender: 'ai',
        message: 'This is a simulated response. In a real implementation, this would be generated by the AI based on the study materials.',
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, aiMessage]);
    }, 1000);
  };

  return (
    <div className="h-[500px] max-w-2xl mx-auto">
      <ChatInterface messages={messages} onSendMessage={handleSendMessage} />
    </div>
  );
};